#!/usr/bin/env node
'use strict';

const program = require('commander');
const fs = require('fs');

var path;

program
.version('0.1')
.usage('<file> [options]')
.option('-w, --width <value>', 'width in pixels of the input image')
.option('-o, --output [path]', 'destination path of the converted image')
.action((file) => {
	path = file;
});

program.parse(process.argv);

if (typeof path === 'undefined') {
	console.error('no file given');
	process.exit(1);
}

if (!program.width) {
	console.error('no width given');
	process.exit(1);
}

fs.readFile(path, (err, data) => {
	if (err) {
		console.error('cannot read the file');
		process.exit(1);
	}

	let v = 128;
	let byte1 = 0,
		byte2 = 0;

	let buf = Buffer.from(data);
	
	let w = program.width;
	let cols = w / 8;
	let rows = buf.length / (64 * cols);

	let result = [];
	for (let i = 0; i < rows * cols; i++) {
		result[i] = [];
	}

	for (let i = 0; i < buf.length; i++) {
		if (v === 0) {
			// Save result bytes
			let index = i - 1;	// index from the previous element
			let j = Math.floor(index / (w * 8)),
				k = Math.floor(index / 8) % cols;
			result[j * cols + k].push('$' + ('00' + byte1.toString(16)).slice(-2));
			result[j * cols + k].push('$' + ('00' + byte2.toString(16)).slice(-2));

			// Reset auxiliar variables
			v = 128;
			byte1 = byte2 = 0;
		};
		
		let value = buf[i];
		if (value > 1) byte2 += v;
		byte1 += v * (value & 0x01);

		v = Math.floor(v / 2);
	}

	// Save two last bytes
	result[rows * cols - 1].push('$' + ('00' + byte1.toString(16)).slice(-2));
	result[rows * cols - 1].push('$' + ('00' + byte2.toString(16)).slice(-2));

	let output = './out.dat';
	if (program.output) {
		output = program.output;
	}

	const writer = fs.createWriteStream(output);

	// Write the header of the file
	writer.write('; ' + output.substring(output.lastIndexOf('/') + 1) + '\n')
	writer.write(';\n')
	writer.write('; This file was generated by raw2vram.\n')
	writer.write('; http://github.com/voxmures/raw2vram\n')
	writer.write('\n')
	writer.write('; Start of tile array.\n');

	for (let i = 0; i < result.length; i++) {
		writer.write('DB ' + result[i].slice(0, 8).join(',') + '\n');
		writer.write('DB ' + result[i].slice(8, 16).join(',') + '\n');
	}

	writer.write('\n');
	writer.end('; End of ' + output.substring(output.lastIndexOf('/') + 1));

	writer.on('close', () => {
		process.exit(1);
	});
});